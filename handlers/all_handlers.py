from misc import *
from translations import _


# –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@dp.callback_query_handler(text="close", state="*")
async def but_close(callback_query: types.CallbackQuery, state: FSMContext):
    if await get_user_is_blocked(callback_query.from_user.id):
        await bot.send_message(callback_query.from_user.id, await _("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", await get_user_localization(callback_query.from_user.id)))
        return
    if await get_setting("status") == "–≤—ã–∫–ª—é—á–µ–Ω":
        await bot.send_message(callback_query.from_user.id, await _("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", await get_user_localization(callback_query.from_user.id)))
        return
    await state.finish()
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)


# –Ω–∏—á–µ–≥–æ
@dp.callback_query_handler(text="nothing", state="*")
async def but_nothing(callback_query: types.CallbackQuery):
    return


# –∑–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ
@dp.callback_query_handler(text_startswith="close_", state="*")
async def but_close_(callback_query: types.CallbackQuery, state: FSMContext):
    if await get_user_is_blocked(callback_query.from_user.id):
        await bot.send_message(callback_query.from_user.id, await _("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", await get_user_localization(callback_query.from_user.id)))
        return
    if await get_setting("status") == "–≤—ã–∫–ª—é—á–µ–Ω":
        await bot.send_message(callback_query.from_user.id, await _("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", await get_user_localization(callback_query.from_user.id)))
        return
    appeal = await get_appeal(callback_query.data[6:])
    if appeal["status"] == "–ó–∞–≤–µ—Ä—à–µ–Ω–æ":
        await callback_query.message.answer(
            await _("–û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ", await get_user_localization(callback_query.from_user.id)))
        return
    await state.finish()
    appeal = await get_appeal(callback_query.data[6:])
    await update_appeal_status(appeal["id"], "–ó–∞–≤–µ—Ä—à–µ–Ω–æ")
    await insert_message(appeal["manager_id"], appeal['id'], "–û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ", True)
    await bot.send_message(appeal["user_id"],
                           await _("–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ", await get_user_localization(appeal["user_id"])),
                           reply_markup=await main_keyboard(appeal["user_id"]))
    await bot.send_message(appeal["manager_id"],
                           f"{await _('–ó–∞–ø—Ä–æ—Å', await get_user_localization(appeal['manager_id']))}"
                           f" ‚Ññ{appeal['appeal_id']} "
                           f"{await _('–∑–∞–∫—Ä—ã—Ç', await get_user_localization(appeal['manager_id']))}",
                           reply_markup=await main_keyboard(appeal['manager_id']))
    notices = await get_appeal_notices_managers(appeal["id"])
    await del_appeal_notices_managers(appeal["id"])
    for notice in notices:
        await bot.delete_message(notice["user_id"], notice["message_id"])


# –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫
@dp.callback_query_handler(text_startswith="set_user_language_", state="*")
async def but_set_user_language_(callback_query: types.CallbackQuery, state: FSMContext):
    if await get_user_is_blocked(callback_query.from_user.id):
        await bot.send_message(callback_query.from_user.id, await _("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", await get_user_localization(callback_query.from_user.id)))
        return
    if await get_setting("status") == "–≤—ã–∫–ª—é—á–µ–Ω":
        await bot.send_message(callback_query.from_user.id, await _("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", await get_user_localization(callback_query.from_user.id)))
        return
    await state.finish()
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
    await update_user_localization(callback_query.from_user.id, callback_query.data[18:])
    await callback_query.message.answer(
        await _('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!', await get_user_localization(callback_query.from_user.id)),
        reply_markup=await main_keyboard(callback_query.from_user.id))


# —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@dp.callback_query_handler(state="*")
async def but_all(callback_query: types.CallbackQuery):
    if await get_user_is_blocked(callback_query.from_user.id):
        await bot.send_message(callback_query.from_user.id, await _("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", await get_user_localization(callback_query.from_user.id)))
        return
    if await get_setting("status") == "–≤—ã–∫–ª—é—á–µ–Ω":
        await bot.send_message(callback_query.from_user.id, await _("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", await get_user_localization(callback_query.from_user.id)))
        return
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)


# /start
@dp.message_handler(commands=["start"])
async def command_start(message: types.Message, state: FSMContext):
    if await get_user_is_blocked(message.from_user.id):
        await bot.send_message(message.from_user.id, await _("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", await get_user_localization(message.from_user.id)))
        return
    await state.finish()
    await insert_user(message.from_user.username, message.from_user.first_name, message.from_user.last_name,
                      message.from_user.id, message.from_user.language_code)
    await message.answer(await _('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!', await get_user_localization(message.from_user.id)),
                         reply_markup=await main_keyboard(message.from_user.id))
    if message.from_user.id in user_category_page.keys():
        del(user_category_page[message.from_user.id])
    if message.from_user.id in user_category_father.keys():
        del(user_category_father[message.from_user.id])
    if message.from_user.id in user_appeal_page.keys():
        del(user_appeal_page[message.from_user.id])
    if message.from_user.id in user_in_category.keys():
        del(user_in_category[message.from_user.id])
    if message.from_user.id in user_answer_to.keys():
        del(user_answer_to[message.from_user.id])


# /language
@dp.message_handler(commands=["language"], state="*")
async def command_language(message: types.Message, state: FSMContext):
    if await get_user_is_blocked(message.from_user.id):
        await bot.send_message(message.from_user.id, await _("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", await get_user_localization(message.from_user.id)))
        return
    if await get_setting("status") == "–≤—ã–∫–ª—é—á–µ–Ω":
        await bot.send_message(message.from_user.id, await _("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", await get_user_localization(message.from_user.id)))
        return
    await state.finish()
    await update_user(message.from_user.username, message.from_user.first_name, message.from_user.last_name,
                      message.from_user.id)
    await message.answer(await _('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫', await get_user_localization(message.from_user.id)),
                         reply_markup=await language_keyboard())
    if message.from_user.id in user_category_page.keys():
        del(user_category_page[message.from_user.id])
    if message.from_user.id in user_category_father.keys():
        del(user_category_father[message.from_user.id])
    if message.from_user.id in user_appeal_page.keys():
        del(user_appeal_page[message.from_user.id])
    if message.from_user.id in user_in_category.keys():
        del(user_in_category[message.from_user.id])
    if message.from_user.id in user_answer_to.keys():
        del(user_answer_to[message.from_user.id])


# –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message_handler(content_types=["any"], state="*")
async def message_default(message: types.Message, state: FSMContext):
    if await get_user_is_blocked(message.from_user.id):
        await bot.send_message(message.from_user.id, await _("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", await get_user_localization(message.from_user.id)))
        return
    if await get_setting("status") == "–≤—ã–∫–ª—é—á–µ–Ω":
        await bot.send_message(message.from_user.id, await _("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", await get_user_localization(message.from_user.id)))
        return
    await update_user(message.from_user.username, message.from_user.first_name, message.from_user.last_name,
                      message.from_user.id)
    # –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å
    if message.text == f"ü§ñ {await _('–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ', await get_user_localization(message.from_user.id))} DeveBot ü§ñ":
        await state.finish()
        if message.from_user.id in user_category_page.keys():
            del (user_category_page[message.from_user.id])
        if message.from_user.id in user_category_father.keys():
            del (user_category_father[message.from_user.id])
        if message.from_user.id in user_appeal_page.keys():
            del (user_appeal_page[message.from_user.id])
        if message.from_user.id in user_in_category.keys():
            del (user_in_category[message.from_user.id])
        if message.from_user.id in user_answer_to.keys():
            del (user_answer_to[message.from_user.id])
        await message.answer(
            text=f"{await _('–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ', await get_user_localization(message.from_user.id))} <a href='https://deve-bot.com/'>DeveBot</a>",
            reply_markup=await main_keyboard(message.from_user.id), parse_mode="HTML")
    # –ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å
    elif message.text == await _("–ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å", await get_user_localization(message.from_user.id)):
        await state.finish()
        if message.from_user.id in user_category_page.keys():
            del (user_category_page[message.from_user.id])
        if message.from_user.id in user_category_father.keys():
            del (user_category_father[message.from_user.id])
        if message.from_user.id in user_appeal_page.keys():
            del (user_appeal_page[message.from_user.id])
        if message.from_user.id in user_in_category.keys():
            del (user_in_category[message.from_user.id])
        if message.from_user.id in user_answer_to.keys():
            del (user_answer_to[message.from_user.id])
        user_category_page[message.from_user.id] = 1
        user_category_father[message.from_user.id] = 0
        time = await get_last_unfinished_user_appeal(message.from_user.id)
        if time:
            time = datetime.now() - time["date_create"]
            min_time_between_appeals = timedelta(seconds=await get_setting("min_time_between_appeals"))
            if time < min_time_between_appeals:
                time = min_time_between_appeals - time
                await message.answer(
                    f"{await _('–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–æ–¥–æ–∂–¥–∏—Ç–µ', await get_user_localization(message.from_user.id))}"
                    f" {time.seconds} {await _('—Å–µ–∫—É–Ω–¥', await get_user_localization(message.from_user.id))}",
                    reply_markup=await main_keyboard(message.from_user.id))
                return
        if await get_user_appeals_count(message.from_user.id) >= await get_setting("max_count_appeals"):
            await message.answer(await _("–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤",
                                         await get_user_localization(message.from_user.id)),
                                 reply_markup=await main_keyboard(message.from_user.id))
        else:
            await state.set_state(Status.create_appeal)
            await message.answer(
                await _("–ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å", await get_user_localization(message.from_user.id)),
                reply_markup=await close_keyboard(message.from_user.id))
    # –í—ã–±–æ—Ä —Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å–∞
    elif message.text == await _("‚ùî –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚ùî", await get_user_localization(message.from_user.id)):
        await state.finish()
        if message.from_user.id in user_category_page.keys():
            del (user_category_page[message.from_user.id])
        if message.from_user.id in user_appeal_page.keys():
            del (user_appeal_page[message.from_user.id])
        if message.from_user.id in user_in_category.keys():
            del (user_in_category[message.from_user.id])
        if message.from_user.id in user_answer_to.keys():
            del (user_answer_to[message.from_user.id])
        user_category_page[message.from_user.id] = 1
        user_category_father[message.from_user.id] = 0
        categories = await get_categories_on_page(user_category_page[message.from_user.id],
                                                  user_category_father[message.from_user.id])
        categories_page_count = await get_categories_page_count(user_category_father[message.from_user.id])
        shown_appeals = []
        shown_appeals_page_count = await get_shown_appeals_page_count(user_category_father[message.from_user.id])
        if not categories:
            shown_appeals = await get_shown_appeals_on_page(user_category_page[message.from_user.id] - categories_page_count,
                                                            user_category_father[message.from_user.id])
        await message.answer(await _("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", await get_user_localization(message.from_user.id)),
                             reply_markup=await show_categories_appeals_keyboard(
                                 categories, shown_appeals, user_category_page[message.from_user.id],
                                 categories_page_count + shown_appeals_page_count,
                                 message.from_user.id))
    elif await state.get_state() == "Status:create_appeal":
        await state.finish()
        await state.set_state(Status.choose_category)
        user = await get_user_info(message.from_user.id)
        appeal = await insert_appeal(user["user_id"], await generate_appeal_id(), message.text,
                                     user["localization"])
        await insert_pre_message(user["user_id"], appeal['id'], message.text)
        await message.answer(await _('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', await get_user_localization(message.from_user.id)),
                             reply_markup=await show_categories_for_create_question_keyboard(
                                 await get_categories_on_page(user_category_page[message.from_user.id], user_category_father[message.from_user.id]),
                                 user_category_page[message.from_user.id],
                                 await get_categories_page_count(user_category_father[message.from_user.id]),
                                 appeal['id'],
                                 message.from_user.id))
    elif await state.get_state() == "Status:answer":
        await state.finish()
        await insert_message(message.from_user.id, user_answer_to[message.from_user.id], message.text, False)
        notices = await get_appeal_notices_managers(user_answer_to[message.from_user.id])
        await del_appeal_notices_managers(user_answer_to[message.from_user.id])
        for notice in notices:
            await bot.delete_message(notice["user_id"], notice["message_id"])
        appeal = await get_appeal(user_answer_to[message.from_user.id])
        admin = await get_user_info(appeal['manager_id'])
        user = await get_user_info(appeal["user_id"])
        await message.answer(await _("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞!", user['localization']))
        await del_appeal_notices_managers(user_answer_to[message.from_user.id])
        msg = await bot.send_message(appeal['manager_id'],
                                     text=f"{await _('‚ö†Ô∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ ‚ö†Ô∏è', admin['localization'])}\n"
                                          f"{await _('–û–±—Ä–∞—â–µ–Ω–∏–µ', admin['localization'])}: #{appeal['appeal_id']}\n"
                                          f"{await _('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', admin['localization'])}: {await get_category_name(appeal['category_id'])}\n"
                                          f"{await _('–°–æ–æ–±—â–µ–Ω–∏–µ', admin['localization'])}: {appeal['question_text']}\n"
                                          f"{await _('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', admin['localization'])}: @{user['nickname']}",
                                     reply_markup=await manager_appeal_in_work_keyboard(appeal["id"],
                                                                                        appeal['manager_id'], user["blocked"]))
        await insert_appeal_notice(user_answer_to[message.from_user.id], appeal['manager_id'], msg.message_id, True)
    elif await state.get_state() == "Status:find_user":
        await state.finish()
        user = await get_user_by_username(message.text)
        if user is None:
            await message.answer(await _('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', await get_user_localization(message.from_user.id)),
                                 reply_markup=await close_keyboard(message.from_user.id))
        else:
            answer_text = await _('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', await get_user_localization(message.from_user.id)) + ": @" + user["nickname"] + "\n"
            answer_text += await _('–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', await get_user_localization(message.from_user.id)) + ": " + str(user["date_registration"].strftime("%Y-%m-%d %H:%M")) + "\n"
            answer_text += await _('–Ø–∑—ã–∫', await get_user_localization(message.from_user.id)) + ": " + user["localization"] + "\n"
            if user["blocked"]:
                answer_text += await _('–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', await get_user_localization(message.from_user.id)) + "\n"
            await message.answer(answer_text,
                                 reply_markup=await user_find_keyboard(user["blocked"], user["user_id"], message.from_user.id))
    else:
        await state.finish()
        await message.answer(
            await _("–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–ª–∏ –±–æ–ª–µ–µ —Å—É—Ç–æ–∫\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é —Å–Ω–∏–∑—É",
                    await get_user_localization(message.from_user.id)),
            reply_markup=await main_keyboard(message.from_user.id))
